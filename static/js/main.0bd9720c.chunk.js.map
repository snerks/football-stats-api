{"version":3,"sources":["logo.svg","components/points-line-chart.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultState","showTrendLines","showAllDataPoints","showYears","2016","2017","2018","2019","2020","2021","PointsLineChart","props","pointsPerYear","points2016","points2017","points2018","points2019","points2020","points2021","handleShowTrendLines","setState","prevState","nextState","console","warn","JSON","stringify","handleShowAllDataPoints","handleShowYear","year","state","redRgba","redLineColour","redLegendFillColour","purpleRgba","purpleLineColour","purpleLegendFillColour","slateBlueRgba","slateBlueLineColour","slateBlueLegendFillColour","greyLineColour","aliceBlueRgba","aliceBlueLineColour","aliceBlueLegendFillColour","greenRgba","greenLineColour","greenLegendFillColour","orangeRgba","orangeLineColour","orangeLegendFillColour","defaultChartDataSet","fill","lineTension","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","borderWidth","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","pointsRunningTotalsPerYear","this","Object","prototype","hasOwnProperty","call","yearElement","index","length","nextElement","push","dataPointCount","Math","max","labels","element","toString","chartData","datasets","label","backgroundColor","borderColor","pointBorderColor","pointHoverBackgroundColor","data","slice","playoffFormValues","relegationFormValues","style","position","height","className","margin","type","id","onChange","htmlFor","checked","keys","map","i","isNaN","display","marginLeft","options","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","scaleLabel","labelString","xAxes","React","defaultTeamNameInfo","linkText","fullName","App","getEventPoints","event","team","homeTeam","name","full","selectedTeamNameInfoItem","awayTeam","eventOutcome","useState","undefined","setPointsPerYear","teamNameLinkTextItems","setTeamNameLinkTextItems","teamNameInfoItems","setTeamNameInfoItems","setSelectedTeamNameInfoItem","loading","setLoading","useEffect","a","competitionNames","allTeamNameAbbrLinks","allTeamNameLinkTextItems","competitionNameIndex","competitionName","url","fetch","responseJson","json","responseSportsTableData","teamRows","payload","body","sportTables","tables","rows","teamNameAbbrLinks","teamRow","cells","td","abbrLink","teamNameAbbrLink","link","split","allTeamNameInfoItems","text","sort","allTeamNameInfoItemsDefined","filter","b","fetchSportsTableData","maximumYear","startDateISO","endDateISO","todayISO","Date","toISOString","substr","responseFootballScoresMatchListData","tournamentDatesWithEvents","matchData","leagueEventsTemp","leagueNames","forEach","matchDataItem","key","events","ev","indexOf","tournamentSlug","eventProgress","status","startTime","le","unshift","fetchMatchListData","textAlign","target","value","nextItem","find","fontSize","selected","justifyContent","alignItems","border","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bd9720c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import * as React from \"react\";\r\n\r\nimport { Line } from \"react-chartjs-2\";\r\n// import { points2019 } from \"./points2019\";\r\n// import { points2016 } from \"./points2016\";\r\n// import { points2017 } from \"./points2017\";\r\n// import { points2018 } from \"./points2018\";\r\n// import { points2020 } from \"./points2020\";\r\n// import { points2021 } from \"./points2021\";\r\n\r\ninterface PointsLineChartProps {\r\n  // points2016: number[];\r\n  // points2017: number[];\r\n  // points2018: number[];\r\n  // points2019: number[];\r\n  // points2020: number[];\r\n  // points2021: number[];\r\n  pointsPerYear: PointsPerYear;\r\n}\r\n\r\ntype ShowYears = {\r\n  [year: number]: boolean;\r\n}\r\n\r\nexport type PointsPerYear = {\r\n  [year: number]: number[];\r\n}\r\n\r\ninterface PointsLineChartState {\r\n  showTrendLines: boolean;\r\n\r\n  showAllDataPoints: boolean;\r\n\r\n  showYears: ShowYears;\r\n}\r\n\r\nconst defaultState: PointsLineChartState = {\r\n  showTrendLines: false,\r\n  showAllDataPoints: true,\r\n\r\n  showYears: {\r\n    2016: false,\r\n    2017: false,\r\n    2018: false,\r\n    2019: false,\r\n    2020: true,\r\n    2021: true\r\n  }\r\n}\r\n\r\nclass PointsLineChart extends React.Component<\r\n  PointsLineChartProps,\r\n  PointsLineChartState\r\n> {\r\n\r\n  constructor(props = {\r\n    pointsPerYear: {\r\n      points2016: [],\r\n      points2017: [],\r\n      points2018: [],\r\n      points2019: [],\r\n      points2020: [],\r\n      points2021: [],\r\n    }\r\n  }) {\r\n    super(props);\r\n    this.state = defaultState;\r\n  }\r\n\r\n  handleShowTrendLines = () => {\r\n    this.setState(prevState => {\r\n      const nextState = { ...prevState };\r\n      nextState.showTrendLines = !prevState.showTrendLines;\r\n      nextState.showYears = { ...prevState.showYears };\r\n\r\n      console.warn(\"handleShowTrendLines\");\r\n      console.warn(JSON.stringify(nextState));\r\n\r\n      return nextState;\r\n    });\r\n  };\r\n\r\n  handleShowAllDataPoints = () => {\r\n    this.setState(prevState => {\r\n      const nextState = { ...prevState };\r\n      nextState.showAllDataPoints = !prevState.showAllDataPoints;\r\n      nextState.showYears = { ...prevState.showYears };\r\n\r\n      console.warn(\"showAllDataPoints\");\r\n      console.warn(JSON.stringify(nextState));\r\n\r\n      return nextState;\r\n    });\r\n  };\r\n\r\n  handleShowYear = (year: number) => {\r\n    this.setState(prevState => {\r\n      const nextState = { ...prevState };\r\n      nextState.showYears = { ...prevState.showYears };\r\n      nextState.showYears[year] = !prevState.showYears[year];\r\n\r\n      console.warn(\"handleShowYear : \" + year);\r\n      console.warn(JSON.stringify(nextState));\r\n\r\n      return nextState;\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const redRgba = \"255, 0, 0\";\r\n    const redLineColour = `rgba(${redRgba}, 1)`;\r\n    const redLegendFillColour = `rgba(${redRgba}, 0.4)`;\r\n\r\n    // 128, 0, 128\r\n    const purpleRgba = \"85, 85, 85\";\r\n    const purpleLineColour = `rgba(${purpleRgba}, 1)`;\r\n    const purpleLegendFillColour = `rgba(${purpleRgba}, 0.4)`;\r\n\r\n    const slateBlueRgba = \"0, 100, 0\";\r\n    const slateBlueLineColour = `rgba(${slateBlueRgba}, 1)`;\r\n    const slateBlueLegendFillColour = `rgba(${slateBlueRgba}, 0.4)`;\r\n\r\n    const greyRgba = \"220, 220, 220\";\r\n    const greyLineColour = `rgba(${greyRgba}, 1)`;\r\n    // const greyLegendFillColour = `rgba(${greyRgba}, 0.4)`;\r\n\r\n    // 2016 - Alice Blue\r\n    const aliceBlueRgba = \"0, 0, 255\";\r\n    const aliceBlueLineColour = `rgba(${aliceBlueRgba}, 1)`;\r\n    const aliceBlueLegendFillColour = `rgba(${aliceBlueRgba}, 0.4)`;\r\n\r\n    const greenRgba = \"75, 192, 192\";\r\n    const greenLineColour = `rgba(${greenRgba}, 1)`;\r\n    const greenLegendFillColour = `rgba(${greenRgba}, 0.4)`;\r\n\r\n    const orangeRgba = \"255, 165, 0\";\r\n    const orangeLineColour = `rgba(${orangeRgba}, 1)`;\r\n    const orangeLegendFillColour = `rgba(${orangeRgba}, 0.4)`;\r\n\r\n    const defaultChartDataSet: Chart.ChartDataSets = {\r\n      // label: \"2016-\",\r\n      fill: false,\r\n      lineTension: 0.1,\r\n\r\n      // backgroundColor: aliceBlueLegendFillColour,\r\n      // borderColor: aliceBlueLineColour,\r\n\r\n      borderCapStyle: \"butt\",\r\n      borderDash: [3, 3],\r\n      borderDashOffset: 0.0,\r\n      borderJoinStyle: \"miter\",\r\n\r\n      borderWidth: 3,\r\n\r\n      // pointBorderColor: aliceBlueLineColour,\r\n\r\n      pointBackgroundColor: \"#fff\",\r\n      pointBorderWidth: 1,\r\n      pointHoverRadius: 5,\r\n\r\n      // pointHoverBackgroundColor: aliceBlueLineColour,\r\n\r\n      pointHoverBorderColor: greyLineColour,\r\n      pointHoverBorderWidth: 2,\r\n      pointRadius: 1,\r\n      pointHitRadius: 10,\r\n      // data: pointsRunningTotalsPerYear[2016]\r\n    }\r\n\r\n    const pointsRunningTotalsPerYear: PointsPerYear = {\r\n      2016: [],\r\n      2017: [],\r\n      2018: [],\r\n      2019: [],\r\n      2020: [],\r\n      2021: [],\r\n    }\r\n\r\n    // const pointsPerYear: PointsPerYear = {\r\n    //   2016: this.props.pointsPerYear[2016],\r\n    //   2017: this.props.pointsPerYear[2016],\r\n    //   2018: this.props.pointsPerYear[2016],\r\n    //   2019: this.props.pointsPerYear[2016],\r\n    //   2020: this.props.pointsPerYear[2016],\r\n    //   2021: this.props.pointsPerYear[2016],\r\n    // }\r\n\r\n    const pointsPerYear: PointsPerYear = this.props.pointsPerYear;\r\n\r\n    for (const year in pointsRunningTotalsPerYear) {\r\n      if (Object.prototype.hasOwnProperty.call(pointsRunningTotalsPerYear, year)) {\r\n        const yearElement = pointsRunningTotalsPerYear[year];\r\n\r\n        for (let index = 0; index < pointsPerYear[year].length; index++) {\r\n          const runningTotal = index === 0 ? 0 : yearElement[index - 1];\r\n\r\n          const nextElement = runningTotal + pointsPerYear[year][index];\r\n\r\n          yearElement.push(nextElement);\r\n        }\r\n      }\r\n    }\r\n\r\n    // const dataPointCount = pointsPerYear[2016].length;\r\n    const dataPointCount =\r\n      this.state.showAllDataPoints ?\r\n        pointsPerYear[2016].length :\r\n        Math.max(pointsPerYear[2021].length + 10, 12);\r\n\r\n    const labels: string[] = [];\r\n\r\n    for (let index = 0; index < dataPointCount; index++) {\r\n      const gameNumber = index;\r\n\r\n      const element =\r\n        (gameNumber % 5 === 0 ||\r\n          gameNumber === 1 ||\r\n          gameNumber === 23 ||\r\n          gameNumber === 46) &&\r\n          gameNumber !== 45\r\n          ? gameNumber.toString(10)\r\n          : \"\";\r\n\r\n      labels.push(element);\r\n    }\r\n\r\n    const chartData: Chart.ChartData = {\r\n      labels: labels,\r\n\r\n      datasets: []\r\n    };\r\n\r\n    if (this.state.showYears[2016]) {\r\n      if (chartData.datasets) {\r\n        chartData.datasets.push({\r\n          ...defaultChartDataSet,\r\n          label: \"2016-\",\r\n          backgroundColor: aliceBlueLegendFillColour,\r\n          borderColor: aliceBlueLineColour,\r\n          pointBorderColor: aliceBlueLineColour,\r\n          pointHoverBackgroundColor: aliceBlueLineColour,\r\n          data: pointsRunningTotalsPerYear[2016].slice(0, dataPointCount),\r\n        });\r\n      }\r\n    }\r\n\r\n    if (this.state.showYears[2017]) {\r\n      if (chartData.datasets) {\r\n        chartData.datasets.push({\r\n          ...defaultChartDataSet,\r\n          label: \"2017-\",\r\n          backgroundColor: purpleLegendFillColour,\r\n          borderColor: purpleLineColour,\r\n          pointBorderColor: purpleLineColour,\r\n          pointHoverBackgroundColor: purpleLineColour,\r\n          data: pointsRunningTotalsPerYear[2017].slice(0, dataPointCount),\r\n        });\r\n      }\r\n    }\r\n\r\n    if (this.state.showYears[2018]) {\r\n      if (chartData.datasets) {\r\n        chartData.datasets.push({\r\n          ...defaultChartDataSet,\r\n          label: \"2018-\",\r\n          backgroundColor: slateBlueLegendFillColour,\r\n          borderColor: slateBlueLineColour,\r\n          pointBorderColor: slateBlueLineColour,\r\n          pointHoverBackgroundColor: slateBlueLineColour,\r\n          data: pointsRunningTotalsPerYear[2018].slice(0, dataPointCount),\r\n        });\r\n      }\r\n    }\r\n\r\n    if (this.state.showYears[2019]) {\r\n      if (chartData.datasets) {\r\n        chartData.datasets.push({\r\n          ...defaultChartDataSet,\r\n          label: \"2019-\",\r\n          backgroundColor: slateBlueLegendFillColour,\r\n          borderColor: slateBlueLineColour,\r\n          pointBorderColor: slateBlueLineColour,\r\n          pointHoverBackgroundColor: slateBlueLineColour,\r\n          borderDash: [],\r\n          data: pointsRunningTotalsPerYear[2019].slice(0, dataPointCount),\r\n        });\r\n      }\r\n    }\r\n\r\n    if (this.state.showYears[2020]) {\r\n      if (chartData.datasets) {\r\n        chartData.datasets.push({\r\n          ...defaultChartDataSet,\r\n          label: \"2020-\",\r\n          backgroundColor: purpleLegendFillColour,\r\n          borderColor: purpleLineColour,\r\n          pointBorderColor: purpleLineColour,\r\n          pointHoverBackgroundColor: purpleLineColour,\r\n          borderDash: [],\r\n          data: pointsRunningTotalsPerYear[2020].slice(0, dataPointCount),\r\n        });\r\n      }\r\n    }\r\n\r\n    if (this.state.showYears[2021]) {\r\n      if (chartData.datasets) {\r\n        chartData.datasets.push({\r\n          ...defaultChartDataSet,\r\n          label: \"2021-\",\r\n          backgroundColor: redLegendFillColour,\r\n          borderColor: redLineColour,\r\n          pointBorderColor: redLineColour,\r\n          pointHoverBackgroundColor: redLineColour,\r\n          borderDash: [],\r\n          data: pointsRunningTotalsPerYear[2021].slice(0, dataPointCount),\r\n\r\n          borderWidth: 4\r\n        });\r\n      }\r\n    }\r\n\r\n    if (this.state.showTrendLines) {\r\n      const playoffFormValues: number[] = [];\r\n\r\n      for (let index = 0; index < dataPointCount; index++) {\r\n        // const element = (index + 1) * 1.7;\r\n        const element = index * 1.61;\r\n        playoffFormValues.push(element);\r\n      }\r\n\r\n      const relegationFormValues: number[] = [];\r\n\r\n      for (let index = 0; index < dataPointCount; index++) {\r\n        const element = index * 1.0;\r\n        relegationFormValues.push(element);\r\n      }\r\n\r\n      if (chartData.datasets) {\r\n        chartData.datasets.push({\r\n          ...defaultChartDataSet,\r\n          label: \"Playoffs\",\r\n          backgroundColor: greenLegendFillColour,\r\n          borderColor: greenLineColour,\r\n          pointBorderColor: greenLineColour,\r\n          pointHoverBackgroundColor: greenLineColour,\r\n          borderDash: [5, 15],\r\n          data: playoffFormValues,\r\n        });\r\n\r\n        chartData.datasets.push({\r\n          ...defaultChartDataSet,\r\n          label: \"Relegation\",\r\n          backgroundColor: orangeLegendFillColour,\r\n          borderColor: orangeLineColour,\r\n          pointBorderColor: orangeLineColour,\r\n          pointHoverBackgroundColor: orangeLineColour,\r\n          borderDash: [5, 15],\r\n          data: relegationFormValues,\r\n        });\r\n      }\r\n    }\r\n\r\n    const chartOptions = {\r\n      // responsive: true,\r\n      maintainAspectRatio: false,\r\n      scales: {\r\n        yAxes: [\r\n          {\r\n            ticks: {\r\n              beginAtZero: true\r\n            },\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: \"Points Total\"\r\n            }\r\n          }\r\n        ],\r\n        xAxes: [\r\n          {\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: \"Games Played\"\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div style={{ position: \"relative\", height: \"80vh\" }}>\r\n        <div\r\n          className=\"custom-control custom-checkbox\"\r\n          style={{ margin: \"10px 30px 5px 25px\" }}\r\n        >\r\n          <label className=\"custom-control-label\">Show: </label>{\" \"}\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"custom-control-input\"\r\n            id=\"customCheck1\"\r\n            onChange={() => this.handleShowTrendLines()}\r\n          />\r\n          <label className=\"custom-control-label\" htmlFor=\"customCheck1\">\r\n            Trend Lines\r\n          </label>\r\n\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"custom-control-input\"\r\n            id=\"customCheck2\"\r\n            onChange={() => this.handleShowAllDataPoints()}\r\n            checked={this.state.showAllDataPoints}\r\n          />\r\n          <label className=\"custom-control-label\" htmlFor=\"customCheck2\">\r\n            All Points\r\n          </label>\r\n\r\n          {/* <pre>\r\n            {JSON.stringify(this.state, null, 2)}\r\n          </pre> */}\r\n\r\n          {/* {\r\n            Object.keys(this.state.showYears).map(i =>\r\n            (!isNaN(+i) &&\r\n              <div key={+i} style={{ display: \"inline\" }}>\r\n                <h3>{i} : {(this.state.showYears as any)[i]}</h3>\r\n              </div>\r\n            ))\r\n          } */}\r\n\r\n          {\r\n            Object.keys(pointsRunningTotalsPerYear).map(i =>\r\n            (!isNaN(+i) &&\r\n              <div key={+i} style={{ display: \"inline\" }}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"custom-control-input\"\r\n                  id={`show${i}Checkbox`}\r\n                  onChange={() => this.handleShowYear(+i)}\r\n                  style={{ marginLeft: \"10px\" }}\r\n                  checked={(this.state.showYears as any)[i]} />\r\n                <label className=\"custom-control-label\" htmlFor={`show${i}Checkbox`}>\r\n                  {i}-\r\n                </label>\r\n              </div>\r\n            ))\r\n          }\r\n        </div>\r\n\r\n        <Line\r\n          data={chartData}\r\n          options={chartOptions}\r\n        // width={600}\r\n        // redraw={true}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PointsLineChart;\r\n","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PointsLineChart, { PointsPerYear } from './components/points-line-chart';\nimport { FootballScoresMatchListData, TournamentDatesWithEvents, Event, Team } from './models/football-scores-match-list';\nimport { AbbrLink, SportsTableData } from './models/sports-table-data';\n\ntype TeamNameInfo = {\n  linkText: string;\n  fullName: string;\n}\n\n// const competitionNameFull = \"Championship\";\n// const competitionName = \"championship\";\n// const teamNameFull = \"Bristol City\";\n// const teamName = \"bristol-city\";\n\nconst defaultTeamNameInfo: TeamNameInfo = {\n  linkText: \"bristol-city\",\n  fullName: \"Bristol City\"\n};\n\n// const teamNameInfo: TeamNameInfo = defaultTeamNameInfo;\n\nfunction App() {\n  const getEventPoints = (event: Event) => {\n    const team: Team = event.homeTeam.name.full === selectedTeamNameInfoItem.fullName ? event.homeTeam : event.awayTeam;\n\n    const points = team.eventOutcome === \"loss\" ? 0 : team.eventOutcome === \"win\" ? 3 : 1;\n\n    return points;\n  }\n\n  // const [footballScoresMatchListData, setFootballScoresMatchListData] = useState<\n  //   FootballScoresMatchListData | undefined\n  // >(undefined);\n\n  // const [tournamentDatesWithEvents, setTournamentDatesWithEvents] = useState<\n  //   TournamentDatesWithEvents | undefined\n  // >(undefined);\n\n  const [leagueEvents, setLeagueEvents] = useState<\n    Event[] | undefined\n  >(undefined);\n\n  // const [points2020, setPoints2020] = useState<\n  //   number[]\n  // >([]);\n\n  const [pointsPerYear, setPointsPerYear] = useState<\n    PointsPerYear | undefined\n  >(undefined);\n\n  // teamNameLinkTextItems\n  const [teamNameLinkTextItems, setTeamNameLinkTextItems] = useState<\n    (string | undefined)[] | []\n  >([]);\n\n  const [teamNameInfoItems, setTeamNameInfoItems] = useState<\n    (TeamNameInfo | undefined)[] | []\n  >([]);\n\n  const [selectedTeamNameInfoItem, setSelectedTeamNameInfoItem] = useState<\n    TeamNameInfo\n  >(defaultTeamNameInfo);\n\n  const [loading, setLoading] = useState<\n    boolean\n  >(false);\n\n  // // https://push.api.bbci.co.uk/batch?t=/data/bbc-morph-sport-tables-data/competition/championship/sport/football/version/2.0.2?timeout=5\n  useEffect(() => {\n    const fetchSportsTableData = async () => {\n      const pointsPerYear: PointsPerYear = {};\n\n      const competitionNames = [\n        \"premier-league\",\n        \"championship\",\n        \"league-one\",\n        \"league-two\",\n      ];\n\n      const allTeamNameAbbrLinks: (AbbrLink | undefined)[] = [];\n      const allTeamNameLinkTextItems: (string | undefined)[] = [];\n\n      for (let competitionNameIndex = 0; competitionNameIndex < competitionNames.length; competitionNameIndex++) {\n        const competitionName = competitionNames[competitionNameIndex];\n        const url = `https://push.api.bbci.co.uk/batch?t=/data/bbc-morph-sport-tables-data/competition/${competitionName}/sport/football/version/2.0.2?timeout=5`;\n\n        const responseJson = await fetch(url);\n        const responseSportsTableData: SportsTableData = await responseJson.json();\n        const teamRows = responseSportsTableData?.payload[0].body.sportTables.tables[0].rows;\n\n        const teamNameAbbrLinks = teamRows.map(teamRow => teamRow.cells[2].td.abbrLink); // .filter(i => i !== undefined);\n        const teamNameLinkTextItems = teamNameAbbrLinks.map(teamNameAbbrLink => teamNameAbbrLink!.link.split(\"/\").slice(-1)[0]);\n\n        allTeamNameAbbrLinks.push(...teamNameAbbrLinks);\n        allTeamNameLinkTextItems.push(...teamNameLinkTextItems);\n      }\n\n      const allTeamNameInfoItems: (TeamNameInfo | undefined)[] = allTeamNameAbbrLinks.map(teamNameAbbrLink => {\n        if (teamNameAbbrLink === undefined) {\n          return undefined;\n        }\n\n        const linkText = teamNameAbbrLink.link.split(\"/\").slice(-1)[0];\n\n        return {\n\n          linkText,\n          fullName: teamNameAbbrLink.text\n        }\n      });\n\n      allTeamNameLinkTextItems.sort();\n      setTeamNameLinkTextItems(allTeamNameLinkTextItems);\n\n      const allTeamNameInfoItemsDefined = allTeamNameInfoItems.filter(i => i !== undefined);\n\n      allTeamNameInfoItemsDefined.sort((a: TeamNameInfo | undefined, b: TeamNameInfo | undefined) => {\n        if (a === undefined) {\n          return 0;\n        }\n\n        if (b === undefined) {\n          return 0;\n        }\n\n        if (a.fullName < b.fullName) {\n          return -1;\n        }\n        if (a.fullName > b.fullName) {\n          return 1;\n        }\n        // a must be equal to b\n        return 0;\n      });\n\n      setTeamNameInfoItems(allTeamNameInfoItemsDefined);\n\n      // setPointsPerYear(pointsPerYear);\n\n      // setLoading(false);\n    };\n\n    fetchSportsTableData();\n\n  }, []);\n\n  useEffect(() => {\n    const fetchMatchListData = async () => {\n      setLoading(true);\n\n      const pointsPerYear: PointsPerYear = {};\n\n      const minimumYear = 2016;\n      const maximumYear = 2021;\n\n      for (let year = minimumYear; year <= maximumYear; year++) {\n        const startDateISO = `${year}-08-01`;\n        const endDateISO = `${year + 1}-07-31`;\n        const todayISO = new Date().toISOString().substr(0, 10);\n\n        const url = `https://push.api.bbci.co.uk/batch?t=%2Fdata%2Fbbc-morph-football-scores-match-list-data%2FendDate%2F${endDateISO}%2FstartDate%2F${startDateISO}%2Fteam%2F${selectedTeamNameInfoItem.linkText}%2FtodayDate%2F${todayISO}%2Fversion%2F2.4.6?timeout=5`;\n\n        const responseJson = await fetch(url);\n        const responseFootballScoresMatchListData: FootballScoresMatchListData = await responseJson.json();\n        const tournamentDatesWithEvents = responseFootballScoresMatchListData?.payload[0].body.matchData[0].tournamentDatesWithEvents;\n\n        // setFootballScoresMatchListData(responseFootballScoresMatchListData);\n        // setTournamentDatesWithEvents(responseFootballScoresMatchListData?.payload[0].body.matchData[0].tournamentDatesWithEvents);\n\n        const leagueEventsTemp: Event[] = [];\n\n        const leagueNames = [\n          \"premier-league\",\n          \"championship\",\n          \"league-one\",\n          \"league-two\",\n        ]\n\n        if (tournamentDatesWithEvents) {\n          responseFootballScoresMatchListData.payload[0].body.matchData.forEach(matchDataItem => {\n            Object.keys(matchDataItem.tournamentDatesWithEvents).forEach(key => matchDataItem.tournamentDatesWithEvents[key][0].events.forEach(ev => {\n              if (leagueNames.indexOf(ev.tournamentSlug) === -1 && ev.eventProgress.status === \"RESULT\") {\n                console.warn(ev.tournamentSlug);\n              }\n              if (leagueNames.indexOf(ev.tournamentSlug) > -1 && ev.eventProgress.status === \"RESULT\") {\n                leagueEventsTemp.push(ev);\n              }\n            }));\n          });\n        }\n\n        leagueEventsTemp.sort((a: Event, b: Event) => {\n          if (a.startTime < b.startTime) {\n            return -1;\n          }\n          if (a.startTime > b.startTime) {\n            return 1;\n          }\n          // a must be equal to b\n          return 0;\n        });\n\n        // setLeagueEvents(leagueEventsTemp);\n\n        // setPoints2020(leagueEvents.map(le => getEventPoints(le)));\n        pointsPerYear[year] = leagueEventsTemp.map(le => getEventPoints(le));\n        pointsPerYear[year].unshift(0);\n      }\n\n      setPointsPerYear(pointsPerYear);\n\n      setLoading(false);\n    };\n\n    fetchMatchListData();\n\n  }, [selectedTeamNameInfoItem]);\n\n  const handleSelectedTeamChange = (event: any) => {\n    const linkText = event.target.value;\n    const nextItem: TeamNameInfo = {\n      linkText,\n      fullName: teamNameInfoItems.find(i => i?.linkText == linkText)?.fullName || \"NA\"\n    };\n\n    setSelectedTeamNameInfoItem(nextItem);\n  }\n\n  return (\n    <div>\n      {\n        teamNameLinkTextItems &&\n        // <ul>\n        //   {teamNameLinkTextItems.map(name => <li key={name}>{name}</li>)}\n        // </ul>\n        <div style={{ textAlign: \"center\" }}>\n          <select name=\"teamNameInfoItems\" id=\"teamNameInfoItems\" onChange={handleSelectedTeamChange} style={{ fontSize: \"20pt\" }}>\n            {/* <option value=\"volvo\">Volvo</option> */}\n            {teamNameInfoItems.map(i => <option key={i?.linkText || 1} value={i?.linkText} selected={i?.linkText == selectedTeamNameInfoItem.linkText}>{i?.fullName}</option>)}\n          </select>\n        </div>\n      }\n      {/* <pre>{JSON.stringify(selectedTeamNameInfoItem, null, 2)}</pre> */}\n\n      {\n        pointsPerYear && !loading &&\n        <PointsLineChart\n          pointsPerYear={pointsPerYear}\n        />\n      }\n\n      {\n        !pointsPerYear || loading &&\n        // <p>\n        //   Loading...\n        // </p>\n        <div style={{ display: 'flex', justifyContent: \"center\", alignItems: \"center\", height: \"400px\", border: \"3px solid white\" }}>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </div>\n      }\n\n      <div>\n        {/* {points2020 &&\n          <pre>{JSON.stringify(points2020, null, 2)}</pre>\n        } */}\n\n        {/* <ul>\n            {leagueEvents &&\n              leagueEvents.map(leagueEvent => <li key={leagueEvent.startTime}>\n                {new Date(leagueEvent.startTime).toDateString()} : {leagueEvent.homeTeam.name.full} {leagueEvent.homeTeam.scores.fullTime} v {leagueEvent.awayTeam.scores.fullTime} {leagueEvent.awayTeam.name.full} : Points = [{getEventPoints(leagueEvent)}]\n              </li>)\n            }\n          </ul> */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}